#include <iostream>
#include <memory>

#include "UHH2/core/include/AnalysisModule.h"
#include "UHH2/core/include/Event.h"
#include "UHH2/common/include/CommonModules.h"
#include "UHH2/common/include/CleaningModules.h"
#include "UHH2/common/include/ElectronHists.h"
#include "UHH2/common/include/NSelections.h"

#include "UHH2/HOTVRStudies/include/HOTVRStudiesSelections.h"
#include "UHH2/HOTVRStudies/include/HOTVRStudiesHists.h"
#include "UHH2/HOTVRStudies/include/Matching.h"
#include "UHH2/HOTVRStudies/include/Clustering.h"

#include "fastjet/PseudoJet.hh"
#include "fastjet/contrib/HOTVRinfo.hh"
#include "fastjet/contrib/HOTVR.hh"

using namespace std;
using namespace uhh2;
using namespace fastjet;
using namespace contrib;

/** \brief Basic analysis example of an AnalysisModule (formerly 'cycle') in UHH2
 * 
 * This is the central class which calls other AnalysisModules, Hists or Selection classes.
 * This AnalysisModule, in turn, is called (via AnalysisModuleRunner) by SFrame.
 */
class HOTVRStudiesModule: public AnalysisModule {
public:
    
    explicit HOTVRStudiesModule(Context & ctx);
    virtual bool process(Event & event) override;

private:
  //initialize hist class
  std::unique_ptr<Hists> hist_HOTVRjets;
  //initialize event handle
  Event::Handle<vector<fastjet::PseudoJet>> h_HOTVRjets;

  Matching* matching;
  Clustering* clustering;
  vector<fastjet::PseudoJet> pseudojets;
  std::vector<fastjet::PseudoJet> hotvr_jets;

};


HOTVRStudiesModule::HOTVRStudiesModule(Context & ctx){
    cout << "Hello World from HOTVRStudiesModule!" << endl;
    
    //declare event handle
    h_HOTVRjets = ctx.get_handle<vector<fastjet::PseudoJet>>("HOTVRjets");
    // 3. Set up Hists classes:
    hist_HOTVRjets.reset(new HOTVRStudiesHists(ctx, "HOTVRStudiesHists"));
}

bool HOTVRStudiesModule::process(Event & event) {

    // here define genparticles and read from event
    auto genparticles = event.genparticles;
    
//MATCHING -> class to filter the stable particles from the genparticles and create a pseudojet from them
    matching = new Matching();
    matching->Run_matching(genparticles);
    pseudojets = matching->get_stableParticles();

//CLUSTERING -> clusters hotvr jets
    clustering = new Clustering();
    hotvr_jets = clustering->get_hotvr_jets(pseudojets);

    //set the event handle
    event.set(h_HOTVRjets, hotvr_jets);

    //fill hists
    hist_HOTVRjets->fill(event);
    
// decide whether or not to keep the current event in the output:
    return true;
}

// as we want to run the ExampleCycleNew directly with AnalysisModuleRunner,
// make sure the HOTVRStudiesModule is found by class name. This is ensured by this macro:
UHH2_REGISTER_ANALYSIS_MODULE(HOTVRStudiesModule)
