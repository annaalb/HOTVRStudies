#include "UHH2/HOTVRStudies/include/Matching.h"

#include <iostream>
#include "UHH2/core/include/GenParticle.h"


//constructor
Matching::Matching()
{

}

fastjet::PseudoJet Matching::convert_particle(GenParticle* genparticle){
  fastjet::PseudoJet gen_particle(genparticle->v4().Px(),genparticle->v4().Py(),genparticle->v4().Pz(),genparticle->v4().E());
  return gen_particle;

}

bool Matching::IsNeutrino(GenParticle* p)
{
  int id = std::abs(p-> index());
  if (id==12 || id==14 || id==16) return true;
  else return false;
}

bool Matching::IsTop(GenParticle* p)
{
  int id = p->pdgId();
  if (std::abs(id)==6) return true;
  else return false;
}

bool Matching::IsW(GenParticle* p)
{
  int id = p->pdgId();
  if (std::abs(id)==24) return true;
  else return false;
}

bool Matching::IsParton(GenParticle* p)
{
	// keep all quarks, gluons, W, Z bosons
	int fid = std::abs(p->pdgId());
	bool isp = false;
	if (fid<7)   isp = true;
	if (fid==21) isp = true;
	if (fid==23) isp = true;
	if (fid==24) isp = true;
 	return isp;
}

bool Matching::IsStableParticle(GenParticle* p)
{
  int st = p->status();
  if (st==1) return true;
  else return false;
}

void Matching::Run_matching(std::vector<GenParticle>* genparticles)
{
  for (int i=0; i<genparticles->size(); ++i)
    {
      GenParticle* part = &(genparticles->at(i));
      if (IsStableParticle(part) && !IsNeutrino(part)){
	_stableParticles.push_back(convert_particle(part));
      }
    }
}
